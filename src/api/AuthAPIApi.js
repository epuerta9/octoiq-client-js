/*
 * OpenAPI
 * OpenAPI
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AuthLogin} from '../model/AuthLogin';
import {AuthLoginResponse} from '../model/AuthLoginResponse';
import {AuthWhoAmIResponse} from '../model/AuthWhoAmIResponse';
import {UnknownInterface} from '../model/UnknownInterface';

/**
* AuthAPI service.
* @module api/AuthAPIApi
* @version 0.0.1
*/
export class AuthAPIApi {

    /**
    * Constructs a new AuthAPIApi. 
    * @alias module:api/AuthAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the authLogin operation.
     * @callback moduleapi/AuthAPIApi~authLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthLoginResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * login
     * Login using user credentials
     * @param {module:model/AuthLogin} body Request body for controller.AuthLogin
     * @param {module:api/AuthAPIApi~authLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    authLogin(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling authLogin");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthLoginResponse;

      return this.apiClient.callApi(
        '/api/auth/-/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the authLogout operation.
     * @callback moduleapi/AuthAPIApi~authLogoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * logout
     * Logout
     * @param {module:api/AuthAPIApi~authLogoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    authLogout(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/auth/-/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the authRegister operation.
     * @callback moduleapi/AuthAPIApi~authRegisterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthLoginResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * register
     * Register a new Org account with OctoIQ
     * @param {module:model/AuthLogin} body Request body for controller.AuthLogin
     * @param {module:api/AuthAPIApi~authRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    authRegister(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling authRegister");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthLoginResponse;

      return this.apiClient.callApi(
        '/api/auth/-/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the authWhoAmI operation.
     * @callback moduleapi/AuthAPIApi~authWhoAmICallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthWhoAmIResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * whoAmI
     * Check who is the current user
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt Authorization
     * @param {module:api/AuthAPIApi~authWhoAmICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    authWhoAmI(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthWhoAmIResponse;

      return this.apiClient.callApi(
        '/api/auth/whoami', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}