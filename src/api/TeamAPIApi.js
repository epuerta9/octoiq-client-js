/*
 * OpenAPI
 * OpenAPI
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Team} from '../model/Team';
import {TeamCreate} from '../model/TeamCreate';
import {TeamKB} from '../model/TeamKB';
import {TeamQuestion} from '../model/TeamQuestion';
import {TeamTag} from '../model/TeamTag';
import {TeamUpdate} from '../model/TeamUpdate';
import {TeamUser} from '../model/TeamUser';
import {UnknownInterface} from '../model/UnknownInterface';

/**
* TeamAPI service.
* @module api/TeamAPIApi
* @version 0.0.1
*/
export class TeamAPIApi {

    /**
    * Constructs a new TeamAPIApi. 
    * @alias module:api/TeamAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the assignTeamQuestion operation.
     * @callback moduleapi/TeamAPIApi~assignTeamQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * putTeamQuestions
     * Assign a specific question to a team given a team ID, knowledge base ID, and question ID
     * @param {String} id 
     * @param {String} kbid 
     * @param {String} qid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/TeamAPIApi~assignTeamQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    assignTeamQuestion(id, kbid, qid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling assignTeamQuestion");
      }
      // verify the required parameter 'kbid' is set
      if (kbid === undefined || kbid === null) {
        throw new Error("Missing the required parameter 'kbid' when calling assignTeamQuestion");
      }
      // verify the required parameter 'qid' is set
      if (qid === undefined || qid === null) {
        throw new Error("Missing the required parameter 'qid' when calling assignTeamQuestion");
      }

      let pathParams = {
        'id': id,'kbid': kbid,'qid': qid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/team/{id}/kb/{kbid}/questions/{qid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the assignTeamTag operation.
     * @callback moduleapi/TeamAPIApi~assignTeamTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * putTeamTag
     * Assign a tag for a team given a team ID and a tag ID
     * @param {String} id 
     * @param {String} tagid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/TeamAPIApi~assignTeamTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    assignTeamTag(id, tagid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling assignTeamTag");
      }
      // verify the required parameter 'tagid' is set
      if (tagid === undefined || tagid === null) {
        throw new Error("Missing the required parameter 'tagid' when calling assignTeamTag");
      }

      let pathParams = {
        'id': id,'tagid': tagid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/team/{id}/tags/{tagid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createTeam operation.
     * @callback moduleapi/TeamAPIApi~createTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * postTeam
     * Create a team
     * @param {module:model/TeamCreate} body Request body for controller.TeamCreate
     * @param {module:api/TeamAPIApi~createTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createTeam(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createTeam");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Team;

      return this.apiClient.callApi(
        '/api/team/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTeam operation.
     * @callback moduleapi/TeamAPIApi~deleteTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteTeam
     * Delete a team given a team ID
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/TeamAPIApi~deleteTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteTeam(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTeam");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/team/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTeamTag operation.
     * @callback moduleapi/TeamAPIApi~deleteTeamTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteTeamTag
     * Delete a tag for a team given a team ID and a tag ID
     * @param {String} id 
     * @param {String} tagid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/TeamAPIApi~deleteTeamTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteTeamTag(id, tagid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTeamTag");
      }
      // verify the required parameter 'tagid' is set
      if (tagid === undefined || tagid === null) {
        throw new Error("Missing the required parameter 'tagid' when calling deleteTeamTag");
      }

      let pathParams = {
        'id': id,'tagid': tagid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/team/{id}/tags/{tagid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTeam operation.
     * @callback moduleapi/TeamAPIApi~getTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTeam
     * Get a team given team ID
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/TeamAPIApi~getTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTeam(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTeam");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Team;

      return this.apiClient.callApi(
        '/api/team/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTeamKB operation.
     * @callback moduleapi/TeamAPIApi~getTeamKBCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamKB{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTeamKB
     * Get a team knowledge base given a team ID and a knowledge base ID
     * @param {String} id 
     * @param {String} kbid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/TeamAPIApi~getTeamKBCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTeamKB(id, kbid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTeamKB");
      }
      // verify the required parameter 'kbid' is set
      if (kbid === undefined || kbid === null) {
        throw new Error("Missing the required parameter 'kbid' when calling getTeamKB");
      }

      let pathParams = {
        'id': id,'kbid': kbid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamKB;

      return this.apiClient.callApi(
        '/api/team/{id}/kb/{kbid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listTeamKB operation.
     * @callback moduleapi/TeamAPIApi~listTeamKBCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamKB{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllTeamKB
     * Get a team Knowledge Base given a team ID
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/TeamAPIApi~listTeamKBCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listTeamKB(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listTeamKB");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamKB;

      return this.apiClient.callApi(
        '/api/team/{id}/kb', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listTeamKBQuestions operation.
     * @callback moduleapi/TeamAPIApi~listTeamKBQuestionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamQuestion{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllTeamQuestions
     * List knowlege base questions for a team given a team ID, knowledge base ID
     * @param {String} id 
     * @param {String} kbid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/TeamAPIApi~listTeamKBQuestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listTeamKBQuestions(id, kbid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listTeamKBQuestions");
      }
      // verify the required parameter 'kbid' is set
      if (kbid === undefined || kbid === null) {
        throw new Error("Missing the required parameter 'kbid' when calling listTeamKBQuestions");
      }

      let pathParams = {
        'id': id,'kbid': kbid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamQuestion;

      return this.apiClient.callApi(
        '/api/team/{id}/kb/{kbid}/questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listTeamTags operation.
     * @callback moduleapi/TeamAPIApi~listTeamTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamTag{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllTeamTag
     * List tags for a team given a team ID
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/TeamAPIApi~listTeamTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listTeamTags(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listTeamTags");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamTag;

      return this.apiClient.callApi(
        '/api/team/{id}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listTeamUsers operation.
     * @callback moduleapi/TeamAPIApi~listTeamUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamUser{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllTeamUsers
     * List users within a team given a team ID
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/TeamAPIApi~listTeamUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listTeamUsers(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listTeamUsers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamUser;

      return this.apiClient.callApi(
        '/api/team/{id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateTeam operation.
     * @callback moduleapi/TeamAPIApi~updateTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * putTeam
     * Update a team given team ID
     * @param {module:model/TeamUpdate} body Request body for controller.TeamUpdate
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/TeamAPIApi~updateTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateTeam(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTeam");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateTeam");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Team;

      return this.apiClient.callApi(
        '/api/team/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}