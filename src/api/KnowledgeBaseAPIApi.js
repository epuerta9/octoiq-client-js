/*
 * OpenAPI
 * OpenAPI
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Kb} from '../model/Kb';
import {KbCreate} from '../model/KbCreate';
import {KbUpdate} from '../model/KbUpdate';
import {UnknownInterface} from '../model/UnknownInterface';

/**
* KnowledgeBaseAPI service.
* @module api/KnowledgeBaseAPIApi
* @version 0.0.1
*/
export class KnowledgeBaseAPIApi {

    /**
    * Constructs a new KnowledgeBaseAPIApi. 
    * @alias module:api/KnowledgeBaseAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createKB operation.
     * @callback moduleapi/KnowledgeBaseAPIApi~createKBCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Kb{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * postKb
     * Create a new knowledge base
     * @param {module:model/KbCreate} body Request body for controller.KbCreate
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/KnowledgeBaseAPIApi~createKBCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createKB(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createKB");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Kb;

      return this.apiClient.callApi(
        '/api/kb/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createKBQuestion operation.
     * @callback moduleapi/KnowledgeBaseAPIApi~createKBQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * postKbQuestion
     * Create a new question within the knowledge base given the knowledge base ID
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/KnowledgeBaseAPIApi~createKBQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createKBQuestion(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createKBQuestion");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/kb/{id}/questions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createVersionKBQuestion operation.
     * @callback moduleapi/KnowledgeBaseAPIApi~createVersionKBQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * putKbQuestion
     * Create a new question version for a particular question within the knowledge base given the knowledge base ID
     * @param {String} id 
     * @param {String} qid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/KnowledgeBaseAPIApi~createVersionKBQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createVersionKBQuestion(id, qid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createVersionKBQuestion");
      }
      // verify the required parameter 'qid' is set
      if (qid === undefined || qid === null) {
        throw new Error("Missing the required parameter 'qid' when calling createVersionKBQuestion");
      }

      let pathParams = {
        'id': id,'qid': qid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/kb/{id}/questions/{qid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the dELETEApikbidquestionsqidtagstagidDeleteKbQuestionTag operation.
     * @callback moduleapi/KnowledgeBaseAPIApi~dELETEApikbidquestionsqidtagstagidDeleteKbQuestionTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteKbQuestionTag
     * controller: github.com/epuerta9/octoiq/controllers.KbRessources.deleteKbQuestionTag
     * @param {String} id 
     * @param {String} qid 
     * @param {String} tagid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/KnowledgeBaseAPIApi~dELETEApikbidquestionsqidtagstagidDeleteKbQuestionTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    dELETEApikbidquestionsqidtagstagidDeleteKbQuestionTag(id, qid, tagid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dELETEApikbidquestionsqidtagstagidDeleteKbQuestionTag");
      }
      // verify the required parameter 'qid' is set
      if (qid === undefined || qid === null) {
        throw new Error("Missing the required parameter 'qid' when calling dELETEApikbidquestionsqidtagstagidDeleteKbQuestionTag");
      }
      // verify the required parameter 'tagid' is set
      if (tagid === undefined || tagid === null) {
        throw new Error("Missing the required parameter 'tagid' when calling dELETEApikbidquestionsqidtagstagidDeleteKbQuestionTag");
      }

      let pathParams = {
        'id': id,'qid': qid,'tagid': tagid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/kb/{id}/questions/{qid}/tags/{tagid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteKB operation.
     * @callback moduleapi/KnowledgeBaseAPIApi~deleteKBCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteKb
     * Delete a knowledge base
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/KnowledgeBaseAPIApi~deleteKBCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteKB(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteKB");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/kb/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteKBQuestion operation.
     * @callback moduleapi/KnowledgeBaseAPIApi~deleteKBQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteKbQuestion
     * Delete a question from the knowledge base given the knowledge base ID and the question ID
     * @param {String} id 
     * @param {String} questionid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/KnowledgeBaseAPIApi~deleteKBQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteKBQuestion(id, questionid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteKBQuestion");
      }
      // verify the required parameter 'questionid' is set
      if (questionid === undefined || questionid === null) {
        throw new Error("Missing the required parameter 'questionid' when calling deleteKBQuestion");
      }

      let pathParams = {
        'id': id,'questionid': questionid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/kb/{id}/questions/{questionid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gETApikbidquestionsqidshareGetAllKbQuestionMagicLinks operation.
     * @callback moduleapi/KnowledgeBaseAPIApi~gETApikbidquestionsqidshareGetAllKbQuestionMagicLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllKbQuestionMagicLinks
     * controller: github.com/epuerta9/octoiq/controllers.KbRessources.getAllKbQuestionMagicLinks
     * @param {String} id 
     * @param {String} qid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/KnowledgeBaseAPIApi~gETApikbidquestionsqidshareGetAllKbQuestionMagicLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gETApikbidquestionsqidshareGetAllKbQuestionMagicLinks(id, qid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gETApikbidquestionsqidshareGetAllKbQuestionMagicLinks");
      }
      // verify the required parameter 'qid' is set
      if (qid === undefined || qid === null) {
        throw new Error("Missing the required parameter 'qid' when calling gETApikbidquestionsqidshareGetAllKbQuestionMagicLinks");
      }

      let pathParams = {
        'id': id,'qid': qid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/kb/{id}/questions/{qid}/share', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gETApikbidquestionsqidversionsGetKbQuestionVersions operation.
     * @callback moduleapi/KnowledgeBaseAPIApi~gETApikbidquestionsqidversionsGetKbQuestionVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getKbQuestionVersions
     * controller: github.com/epuerta9/octoiq/controllers.KbRessources.getKbQuestionVersions
     * @param {String} id 
     * @param {String} qid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/KnowledgeBaseAPIApi~gETApikbidquestionsqidversionsGetKbQuestionVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gETApikbidquestionsqidversionsGetKbQuestionVersions(id, qid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gETApikbidquestionsqidversionsGetKbQuestionVersions");
      }
      // verify the required parameter 'qid' is set
      if (qid === undefined || qid === null) {
        throw new Error("Missing the required parameter 'qid' when calling gETApikbidquestionsqidversionsGetKbQuestionVersions");
      }

      let pathParams = {
        'id': id,'qid': qid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/kb/{id}/questions/{qid}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gETApikbidquestionsqidversionslatestGetKbQuestionLatest operation.
     * @callback moduleapi/KnowledgeBaseAPIApi~gETApikbidquestionsqidversionslatestGetKbQuestionLatestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getKbQuestionLatest
     * controller: github.com/epuerta9/octoiq/controllers.KbRessources.getKbQuestionLatest
     * @param {String} id 
     * @param {String} qid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/KnowledgeBaseAPIApi~gETApikbidquestionsqidversionslatestGetKbQuestionLatestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gETApikbidquestionsqidversionslatestGetKbQuestionLatest(id, qid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gETApikbidquestionsqidversionslatestGetKbQuestionLatest");
      }
      // verify the required parameter 'qid' is set
      if (qid === undefined || qid === null) {
        throw new Error("Missing the required parameter 'qid' when calling gETApikbidquestionsqidversionslatestGetKbQuestionLatest");
      }

      let pathParams = {
        'id': id,'qid': qid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/kb/{id}/questions/{qid}/versions/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllKBQuestion operation.
     * @callback moduleapi/KnowledgeBaseAPIApi~getAllKBQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllQuestions
     * List all questions in the knowledge base given the knowledge base ID
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/KnowledgeBaseAPIApi~getAllKBQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllKBQuestion(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllKBQuestion");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/kb/{id}/questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getKB operation.
     * @callback moduleapi/KnowledgeBaseAPIApi~getKBCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Kb{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getKb
     * Get a specific knowledge base given a knowledge base ID
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/KnowledgeBaseAPIApi~getKBCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getKB(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getKB");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Kb;

      return this.apiClient.callApi(
        '/api/kb/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pOSTApikbidquestionsqidversionsPostKbQuestionVersion operation.
     * @callback moduleapi/KnowledgeBaseAPIApi~pOSTApikbidquestionsqidversionsPostKbQuestionVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * postKbQuestionVersion
     * controller: github.com/epuerta9/octoiq/controllers.KbRessources.postKbQuestionVersion
     * @param {String} id 
     * @param {String} qid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/KnowledgeBaseAPIApi~pOSTApikbidquestionsqidversionsPostKbQuestionVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    pOSTApikbidquestionsqidversionsPostKbQuestionVersion(id, qid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pOSTApikbidquestionsqidversionsPostKbQuestionVersion");
      }
      // verify the required parameter 'qid' is set
      if (qid === undefined || qid === null) {
        throw new Error("Missing the required parameter 'qid' when calling pOSTApikbidquestionsqidversionsPostKbQuestionVersion");
      }

      let pathParams = {
        'id': id,'qid': qid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/kb/{id}/questions/{qid}/versions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the pUTApikbidquestionsqidtagstagidAssignKbQuestionTag operation.
     * @callback moduleapi/KnowledgeBaseAPIApi~pUTApikbidquestionsqidtagstagidAssignKbQuestionTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnknownInterface{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * assignKbQuestionTag
     * controller: github.com/epuerta9/octoiq/controllers.KbRessources.assignKbQuestionTag
     * @param {String} id 
     * @param {String} qid 
     * @param {String} tagid 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/KnowledgeBaseAPIApi~pUTApikbidquestionsqidtagstagidAssignKbQuestionTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    pUTApikbidquestionsqidtagstagidAssignKbQuestionTag(id, qid, tagid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling pUTApikbidquestionsqidtagstagidAssignKbQuestionTag");
      }
      // verify the required parameter 'qid' is set
      if (qid === undefined || qid === null) {
        throw new Error("Missing the required parameter 'qid' when calling pUTApikbidquestionsqidtagstagidAssignKbQuestionTag");
      }
      // verify the required parameter 'tagid' is set
      if (tagid === undefined || tagid === null) {
        throw new Error("Missing the required parameter 'tagid' when calling pUTApikbidquestionsqidtagstagidAssignKbQuestionTag");
      }

      let pathParams = {
        'id': id,'qid': qid,'tagid': tagid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UnknownInterface;

      return this.apiClient.callApi(
        '/api/kb/{id}/questions/{qid}/tags/{tagid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateKB operation.
     * @callback moduleapi/KnowledgeBaseAPIApi~updateKBCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Kb{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * putKb
     * Update a specific knowledge base given a knowledge base ID
     * @param {module:model/KbUpdate} body Request body for controller.KbUpdate
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/KnowledgeBaseAPIApi~updateKBCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateKB(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateKB");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateKB");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Kb;

      return this.apiClient.callApi(
        '/api/kb/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}