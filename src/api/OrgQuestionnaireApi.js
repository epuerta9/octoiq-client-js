/*
 * OpenAPI
 * OpenAPI
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {OrgCreateQuestionnaire} from '../model/OrgCreateQuestionnaire';
import {OrgQuestionnaire} from '../model/OrgQuestionnaire';

/**
* OrgQuestionnaire service.
* @module api/OrgQuestionnaireApi
* @version 0.0.1
*/
export class OrgQuestionnaireApi {

    /**
    * Constructs a new OrgQuestionnaireApi. 
    * @alias module:api/OrgQuestionnaireApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createOrgQuestionnaire operation.
     * @callback moduleapi/OrgQuestionnaireApi~createOrgQuestionnaireCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgQuestionnaire{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * postOrgQuestionnaire
     * Create a specific org questionnaire given Org ID
     * @param {module:model/OrgCreateQuestionnaire} body Request body for controller.OrgCreateQuestionnaire
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/OrgQuestionnaireApi~createOrgQuestionnaireCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createOrgQuestionnaire(body, id, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createOrgQuestionnaire");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createOrgQuestionnaire");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrgQuestionnaire;

      return this.apiClient.callApi(
        '/api/org/{id}/questionnaire', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOrgQuestionnaire operation.
     * @callback moduleapi/OrgQuestionnaireApi~getOrgQuestionnaireCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrgQuestionnaire{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getOrgQuestionnaire
     * Get a specific org onboarding questionnaire
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.jwt authorization
     * @param {module:api/OrgQuestionnaireApi~getOrgQuestionnaireCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOrgQuestionnaire(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrgQuestionnaire");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OrgQuestionnaire;

      return this.apiClient.callApi(
        '/api/org/{id}/questionnaire', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}