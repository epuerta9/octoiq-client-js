/*
 * OpenAPI
 * OpenAPI
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.52
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenApi);
  }
}(this, function(expect, OpenApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenApi.OrgAPIApi();
  });

  describe('(package)', function() {
    describe('OrgAPIApi', function() {
      describe('assignOrgUser', function() {
        it('should call assignOrgUser successfully', function(done) {
          // TODO: uncomment, update parameter values for assignOrgUser call and complete the assertions
          /*
          var opts = {};

          instance.assignOrgUser(id, userid, teamid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApi.UnknownInterface);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrgQuestionnaire', function() {
        it('should call createOrgQuestionnaire successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrgQuestionnaire call and complete the assertions
          /*
          var opts = {};

          instance.createOrgQuestionnaire(body, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApi.OrgQuestionnaire);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createOrgUser', function() {
        it('should call createOrgUser successfully', function(done) {
          // TODO: uncomment, update parameter values for createOrgUser call and complete the assertions
          /*
          var opts = {};

          instance.createOrgUser(body, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApi.OrgUser);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteOrgUser', function() {
        it('should call deleteOrgUser successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteOrgUser call and complete the assertions
          /*
          var opts = {};

          instance.deleteOrgUser(id, userid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApi.UnknownInterface);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrg', function() {
        it('should call getOrg successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrg call and complete the assertions
          /*
          var opts = {};

          instance.getOrg(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApi.Org);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrgPlan', function() {
        it('should call getOrgPlan successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrgPlan call and complete the assertions
          /*
          var opts = {};

          instance.getOrgPlan(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApi.OrgPlan);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrgQuestionnaire', function() {
        it('should call getOrgQuestionnaire successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrgQuestionnaire call and complete the assertions
          /*
          var opts = {};

          instance.getOrgQuestionnaire(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApi.OrgQuestionnaire);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrgTags', function() {
        it('should call getOrgTags successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrgTags call and complete the assertions
          /*
          var opts = {};

          instance.getOrgTags(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApi.OrgTag);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrgTeams', function() {
        it('should call getOrgTeams successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrgTeams call and complete the assertions
          /*
          var opts = {};

          instance.getOrgTeams(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApi.OrgTeam);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrgUser', function() {
        it('should call getOrgUser successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrgUser call and complete the assertions
          /*
          var opts = {};

          instance.getOrgUser(id, userid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApi.OrgUser);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getOrgUsers', function() {
        it('should call getOrgUsers successfully', function(done) {
          // TODO: uncomment, update parameter values for getOrgUsers call and complete the assertions
          /*
          var opts = {};

          instance.getOrgUsers(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApi.OrgUser);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrg', function() {
        it('should call updateOrg successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrg call and complete the assertions
          /*
          var opts = {};

          instance.updateOrg(body, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApi.Org);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateOrgQuestionnaire', function() {
        it('should call updateOrgQuestionnaire successfully', function(done) {
          // TODO: uncomment, update parameter values for updateOrgQuestionnaire call and complete the assertions
          /*
          var opts = {};

          instance.updateOrgQuestionnaire(body, id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(OpenApi.UnknownInterface);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
